from __future__ import annotations

import numpy as np

from typing import Any, Dict, Tuple, Type, Sequence, Union, List


class Mono:
    composite: bool = False

    def __init__(self, *params: Tuple[Mono, ...]) -> None: ...
    @property
    def parameters(self) -> Tuple[Mono, ...]: ...
    def info(self) -> Tuple[Type[Mono], Tuple[Mono, ...]]: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def shape(self) -> Tuple[int, ...]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Union[str, int]) -> Record: ...
    @property
    def measure(self) -> Mono: ...
    def subarray(self, leading: int) -> Mono: ...
    def __mul__(self, other: Mono) -> DataShape: ...
    def __rmul__(self, other: Mono) -> DataShape: ...
    def __getstate__(self) -> Tuple[Mono, ...]: ...
    def __setstate__(self, state: Tuple[Mono, ...]) -> None: ...
    def to_numpy_dtype(self) -> np.dtype[Any]: ...


class Unit(Mono):
    cls: int

    def __str__(self) -> str: ...


class Var(Unit):
    ...


class CType(Unit):
    @classmethod
    def from_numpy_dtype(self, dt: np.dtype[Any]) -> CType: ...
    @property
    def itemsize(self) -> int: ...
    @property
    def alignment(self) -> int: ...


class Record(Mono):
    def __init__(self, fields: Union[Dict[str, Mono], List[Tuple[str, Mono]]]) -> None: ...
    @property
    def fields(self) -> Tuple[Tuple[str, Mono], ...]: ...
    @property
    def dict(self) -> Dict[str, Mono]: ...
    @property
    def types(self) -> List[Mono]: ...
    def __getitem__(self, key: Union[str, int]) -> Record: ...
    def __str__(self) -> str: ...


SimpleIndex = Union[int, str]
ComplexIndex = Union[SimpleIndex, slice, List[SimpleIndex], Tuple[Union[SimpleIndex, slice], ...]]


class IndexCallable:
    def __getitem__(self, key: ComplexIndex) -> DataShape: ...


class DataShape(Mono):
    def __init__(self, *parameters: Sequence[Mono], **kwds: Dict[str, Any]) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @property
    def subshape(self) -> IndexCallable: ...


def dshape(x: Union[DataShape, Mono, str, Sequence[Union[Mono, str, Tuple[Any]]]]) -> DataShape: ...
def pprint(dshape: Union[Mono, str], width: int) -> str: ...
